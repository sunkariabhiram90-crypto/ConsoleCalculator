# Student Record Management System

A simple console-based Java application to manage student records. It supports adding, viewing (all / by stream / by ID), updating, deleting, persisting (save/load) student records using Java object serialization.

---

## Table of Contents

* [Overview](#overview)
* [Features](#features)
* [Project Structure](#project-structure)
* [How it Works](#how-it-works)
* [Methods / Public API (detailed)](#methods--public-api-detailed)

  * `Student` class
  * `StudentManagementSystem` class
* [Persistence (File Format)](#persistence-file-format)
* [How to Compile & Run](#how-to-compile--run)
* [Usage Examples](#usage-examples)
* [Limitations & Notes](#limitations--notes)
* [Potential Improvements](#potential-improvements)
* [License](#license)

---

## Overview

This project is a beginner-friendly student record management system written in Java. It stores `Student` objects in memory (an `ArrayList`) and persists them to disk as a serialized file named `students.dat` using Java's built-in object serialization.

The application runs in the console and offers a menu-driven interface for CRUD operations.

## Features

* Add a student (ID, name, stream, marks)
* View students (all, by stream, or by ID)
* Update specific fields of a student (name, stream, marks, or all)
* Delete a student by ID
* Clear all student records (with confirmation)
* Save records to disk and load them on startup
* Simple, human-readable console table output

## Project Structure

* `Student` — a simple serializable data class that represents a student.
* `StudentManagementSystem` — contains the `main` method and all user-interaction logic.
* `students.dat` — the default filename used for serialized storage (created at runtime).

## How it Works

1. On startup the program calls `loadData()` to look for `students.dat`. If present, it deserializes the `ArrayList<Student>` and loads it into the in-memory `students` list.
2. The program displays a console menu and lets the user choose actions.
3. Each action manipulates the in-memory `students` list.
4. On selecting "Save & Exit", `saveData()` serializes the `students` list back to `students.dat`.

## Methods / Public API (detailed)

### `Student` class

A lightweight POJO (Plain Old Java Object) that implements `Serializable` so instances can be written to and read from disk.

* **Fields**

  * `private int id` — unique identifier (the code expects ID values to be unique but does not automatically enforce uniqueness).
  * `private String name` — the student's name.
  * `private String stream` — the student's stream/department (e.g. CSE, ECE, IT).
  * `private double marks` — numeric marks or grade value.

* **Constructor**

  * `public Student(int id, String name, String stream, double marks)` — sets all fields.

* **Getters**

  * `getId()` — returns `id`.
  * `getName()` — returns `name`.
  * `getStream()` — returns `stream`.
  * `getMarks()` — returns `marks`.

* **Setters**

  * `setName(String name)` — update name.
  * `setStream(String stream)` — update stream.
  * `setMarks(double marks)` — update marks.

> Note: `Student` implements `Serializable`. If you change the class structure later (add/remove fields), you should consider adding a `serialVersionUID` to make the serialized form explicit and handle compatibility.

### `StudentManagementSystem` class

Contains the `main` method and helper operations for all user-driven actions.

* `public static final String FILE_NAME = "students.dat";`

  * The filename used to save and load the serialized `ArrayList<Student>`.

* `public static ArrayList<Student> students = new ArrayList<>();`

  * In-memory store of `Student` objects.

* `public static Scanner sc = new Scanner(System.in);`

  * Scanner for reading user input from `System.in`.

* `public static void main(String[] args)`

  * Loads data by calling `loadData()` and starts a menu loop. The loop continues until the user chooses to save and exit (option 6).

* `public static void addStudent()`

  * Prompts for ID, name, stream, and marks.
  * Creates a new `Student` and appends it to `students`.
  * **Notes**: The method does not validate uniqueness of the ID; consider checking `students` to prevent duplicates.

* `public static void viewStudents()`

  * Lets user choose to view `all`, `stream`, or `id`. The choice is case-insensitive.
  * Performs filtering and prints a formatted table with columns ID, Name, Stream, Marks.
  * If no matching records found, prints a friendly warning.
  * Handles the special case where the user types a stream directly (falls through to stream filter).

* `public static void updateStudent()`

  * Prompts for the student ID and searches the `students` list.
  * If found, asks which field to update: `name`, `stream`, `marks`, or `all`.
  * Updates the requested field(s) on the `Student` object.
  * Uses `s.setName()`, `s.setStream()`, and `s.setMarks()` for changes.

* `public static void deleteStudent()`

  * Prompts for student ID and removes matching student(s) using `students.removeIf(...)`.
  * Prints success or failure message based on whether removal happened.

* `public static void clearAllData()`

  * Prompts for confirmation (`yes` required) and calls `students.clear()` to remove all records.

* `public static void saveData()`

  * Uses `ObjectOutputStream` to write `students` to `FILE_NAME`.
  * Wraps the stream in a try-with-resources block to safely close resources.
  * Handles `IOException` and prints a friendly error message on failure.

* `@SuppressWarnings("unchecked") public static void loadData()`

  * Checks if `students.dat` exists; if not, does nothing.
  * If file exists, opens an `ObjectInputStream` and reads an `ArrayList<Student>` back into `students`.
  * Catches `IOException` and `ClassNotFoundException` and prints an explanatory message if loading fails.

## Persistence (File Format)

* The program uses **Java serialization** to persist the `ArrayList<Student>` object graph into a binary file (`students.dat`).
* This isn't a human-readable format. If you need portability or easier inspection, consider switching to JSON (using a library like Jackson or Gson) or CSV.

## How to Compile & Run

1. Save source files (for example in `src` folder):

   * `Student.java` (class definition)
   * `StudentManagementSystem.java` (main program)

2. Open a terminal and compile:

```bash
javac Student.java StudentManagementSystem.java
```

3. Run the program:

```bash
java StudentManagementSystem
```

> The program creates/reads `students.dat` in the current working directory.

## Usage Examples

* Add a student: choose `1` and follow prompts.
* View all students: choose `2`, then type `all`.
* View by stream: choose `2`, then type `stream` and enter a stream name such as `CSE`.
* Update a student: choose `3`, provide ID, then choose `name`, `stream`, `marks`, or `all`.
* Delete a student: choose `4` and provide the ID.
* Clear all records: choose `5` and confirm with `yes`.
* Save & exit: choose `6` — this serializes `students` to `students.dat` and exits the program.

## Limitations & Notes

* **No ID uniqueness enforcement**: The code assumes the caller will not enter duplicate IDs. Consider adding a check in `addStudent()` to reject duplicates.
* **No input validation**: The program trusts input types (e.g., numeric IDs and marks). Invalid input (like letters when numbers are expected) will throw exceptions. You may want to use `sc.hasNextInt()` / try-catch blocks for robust validation.
* **Serialization fragility**: Changes to `Student` fields in future versions can break backward compatibility of `students.dat`. Add `serialVersionUID` and provide migration code if needed.
* **Single-user console app**: Not thread-safe and intended for single-user use. For multi-user or web access, switch to a database.

## Potential Improvements

* Validate input and enforce unique IDs.
* Replace Java serialization with JSON/CSV or a lightweight DB (SQLite) for readability and compatibility.
* Add search by name, range of marks, sorting options.
* Export/import CSV or JSON for interoperability.
* Add a GUI (Swing/JavaFX) or a web UI for better UX.
* Add unit tests for methods.

## License

This repository is provided under the MIT License — feel free to reuse and modify.

---

If you'd like, I can:

* Produce a `README.md` file ready to paste into GitHub (this document is formatted as such),
* Add a short `CONTRIBUTING.md` or `USAGE.md`, or
* Modify the README to include screenshots or example `students.dat` creation steps.

Tell me which edits you want and I'll update the document.
